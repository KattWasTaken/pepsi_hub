local keyb = "z" -- Change that to whatever keybind: "t"
local location = Vector3.new(5,5,0)
--// Services
checkcaller = checkcaller
newcclosure = newcclosure
hookmetamethod = hookmetamethod

local PastedSources = false
local BruhXD = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Bullshit = LocalPlayer:GetMouse()

local RealCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

RealCharacter.Archivable = true
local FakeCharacter = RealCharacter:Clone()
local Part
Part = Instance.new("Part", workspace)
Part.Anchored = true
Part.Size = Vector3.new(200, 1, 200)
Part.CFrame = CFrame.new(0, -500, 0) --Set this to whatever you want, just far away from the map.
Part.CanCollide = true
FakeCharacter.Parent = workspace
FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
for i, v in pairs(RealCharacter:GetChildren()) do
  if v:IsA("LocalScript") then
      local clone = v:Clone()
      clone.Disabled = true
      clone.Parent = FakeCharacter
  end
end
local esp = Instance.new("Highlight", FakeCharacter)
esp.FillColor = Color3.fromRGB(255,255,255)
esp.OutlineColor = Color3.fromRGB(255,255,255)    
esp.FillTransparency = 0.5
esp.OutlineTransparency = 0
esp.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
--// Toggles
Bullshit.KeyDown:Connect(function(key)
	if key == string.lower(keyb) and LocalPlayer.Character then
		if PastedSources == false then
			PastedSources = true
		elseif PastedSources == true then
			PastedSources = false
		end
	end
end)

--// Desync_Source
function RandomNumberRange(a)
	return math.random(-a * 100, a * 100) / 100
end

function RandomVectorRange(a, b, c)
	return Vector3.new(RandomNumberRange(a), RandomNumberRange(b), RandomNumberRange(c))
end

local DesyncTypes = {}
BruhXD.Heartbeat:Connect(function()
	if PastedSources == true and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character:FindFirstChild("Humanoid").Health > 0 then
        		
        --workspace.CurrentCamera.CameraSubject = FakeCharacter.Humanoid
        for i, v in pairs(RealCharacter:GetDescendants()) do
          if v:IsA("BasePart") and v ~= RealCharacter.HumanoidRootPart then
              v.Transparency = 0.7
          end
        end
        DesyncTypes[1] = LocalPlayer.Character.HumanoidRootPart.CFrame
		DesyncTypes[2] = LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity
		
		local SpoofThis = LocalPlayer.Character.HumanoidRootPart.CFrame

		SpoofThis = SpoofThis * CFrame.new(location)
		SpoofThis = SpoofThis * CFrame.Angles(math.rad(90),math.rad(math.random(-90,90)),math.rad(math.random(-90,90)))

		LocalPlayer.Character.HumanoidRootPart.CFrame = SpoofThis
		FakeCharacter.HumanoidRootPart.CFrame = SpoofThis
		FakeCharacter.Humanoid:ChangeState(11)

        if LocalPlayer.Character.Humanoid.MoveDirection.Magnitude > 0 then
		    LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity = location * 16384
        else
            LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        end
        
		BruhXD.RenderStepped:Wait()

		LocalPlayer.Character.HumanoidRootPart.CFrame = DesyncTypes[1]
		LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity = DesyncTypes[2]
		
	else
	    
        --workspace.CurrentCamera.CameraSubject = RealCharacter.Humanoid
        for i, v in pairs(RealCharacter:GetDescendants()) do
          if v:IsA("BasePart") and v ~= RealCharacter.HumanoidRootPart then
              v.Transparency = 0
          end
        end
	    PastedSources = false
		FakeCharacter.HumanoidRootPart.CFrame = CFrame.new(0,200,0)
	end
end)


--// Hook_CFrame
local XDDDDDD = nil
XDDDDDD = hookmetamethod(game, "__index", newcclosure(function(self, key)
	if PastedSources == true then
		if not checkcaller() then
			if key == "CFrame" and PastedSources == true and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character:FindFirstChild("Humanoid").Health > 0 then
				if self == LocalPlayer.Character.HumanoidRootPart then
					return DesyncTypes[1] or CFrame.new()
				elseif self == LocalPlayer.Character.Head then
					return DesyncTypes[1] and DesyncTypes[1] + Vector3.new(0, LocalPlayer.Character.HumanoidRootPart.Size.Y / 2 + 0.5, 0) or CFrame.new()
				end
			end
		end
	end
	return XDDDDDD(self, key)
end))
